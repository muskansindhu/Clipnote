import psycopg

from config import SUPABASE_CONNECTION_STRING

def create_video_table():
    query = """
        CREATE TABLE IF NOT EXISTS public.video(
        id TEXT PRIMARY KEY,
        video_url TEXT,
        video_title TEXT,
        fav BOOL DEFAULT false
        );
    """

    with psycopg.connect(SUPABASE_CONNECTION_STRING) as conn:
        with conn.cursor() as cur:
            cur.execute(query)
        conn.commit()

    return

def create_notes_table():
    query = """
        CREATE TABLE IF NOT EXISTS public.notes(
        id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
        video_timestamp TEXT,
        note TEXT,
        video_id TEXT NOT NULL,
        FOREIGN KEY (video_id) REFERENCES video(id)
        );
    """

    with psycopg.connect(SUPABASE_CONNECTION_STRING) as conn:
        with conn.cursor() as cur:
            cur.execute(query)
        conn.commit()

    return

def create_label_table():
    query = """
        CREATE TABLE IF NOT EXISTS public.label(
        id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        label TEXT
        );
    """

    with psycopg.connect(SUPABASE_CONNECTION_STRING) as conn:
        with conn.cursor() as cur:
            cur.execute(query)
        conn.commit()

    return

def create_video_label_table():
    query = """
        CREATE TABLE IF NOT EXISTS public.video_label(
        yt_video_id TEXT NOT NULL,
        label_id INT NOT NULL,
        CONSTRAINT PK_video_label PRIMARY KEY (yt_video_id, label_id),
        FOREIGN KEY (yt_video_id) REFERENCES video(id),
        FOREIGN KEY (label_id) REFERENCES label(id)
        );
    """

    with psycopg.connect(SUPABASE_CONNECTION_STRING) as conn:
        with conn.cursor() as cur:
            cur.execute(query)
        conn.commit()

    return

def delete_video_table():
    query = "DROP TABLE public.video;"
    with psycopg.connect(SUPABASE_CONNECTION_STRING) as conn:
        with conn.cursor() as cur:
            cur.execute(query)
        conn.commit()

    return

def delete_notes_table():
    query = "DROP TABLE public.notes;"
    with psycopg.connect(SUPABASE_CONNECTION_STRING) as conn:
        with conn.cursor() as cur:
            cur.execute(query)
        conn.commit()

    return

def delete_label_table():
    query = "DROP TABLE public.label;"
    with psycopg.connect(SUPABASE_CONNECTION_STRING) as conn:
        with conn.cursor() as cur:
            cur.execute(query)
        conn.commit()

    return

def delete_video_label_table():
    query = "DROP TABLE public.video_label;"
    with psycopg.connect(SUPABASE_CONNECTION_STRING) as conn:
        with conn.cursor() as cur:
            cur.execute(query)
        conn.commit()

    return


if __name__ == "__main__":
    create_video_table()
    create_notes_table()
    create_label_table()
    create_video_label_table()
    print("Tables created!")